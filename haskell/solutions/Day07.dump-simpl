
==================== Tidy Core ====================

Result size of Tidy Core
  = {terms: 3,793, types: 5,263, coercions: 283, joins: 29/38}

$WEquation
  = \ conrep_a25d conrep1_a25e ->
      case conrep_a25d of conrep2_a25d { __DEFAULT ->
      Equation conrep2_a25d conrep1_a25e
      }

lvl_r4FP = "Negative exponent"#

lvl1_r4FQ = unpackCString# lvl_r4FP

lvl2_r4FR = errorWithoutStackTrace lvl1_r4FQ

lvl3_r4FS = IS 1#

lvl4_r4FT = IS 10#

$s$wdecimal_z0 = IS 0#

$s$wdecimal12 = C# 'i'#

$s$wdecimal11 = "nteger"#

$s$wdecimal10 = unpackCString# $s$wdecimal11

$s$wdecimal9 = :| $s$wdecimal12 $s$wdecimal10

$s$wdecimal8 = Label $s$wdecimal9

$s$wdecimal7 = Bin 1# $s$wdecimal8 Tip Tip

Rec {
$s$wdecimal_go1
  = \ ds_a4vg eta_X5 ->
      case ds_a4vg of {
        [] -> eta_X5;
        : y_a4vj ys_a4vk ->
          case eta_X5 of z_a4aK { __DEFAULT ->
          case y_a4vj of { C# ww1_a4bc ->
          case $wdigitToInt ww1_a4bc of ww2_a4be { __DEFAULT ->
          $s$wdecimal_go1
            ys_a4vk (integerAdd (integerMul z_a4aK lvl4_r4FT) (IS ww2_a4be))
          }
          }
          }
      }
end Rec }

$s$wdecimal6 = C# 'd'#

$s$wdecimal5 = "igit"#

$s$wdecimal4 = unpackCString# $s$wdecimal5

$s$wdecimal3 = :| $s$wdecimal6 $s$wdecimal4

$s$wdecimal2 = Label $s$wdecimal3

$s$wdecimal1 = Bin 1# $s$wdecimal2 Tip Tip

$w$s$wdecimal
  = \ ww_s4xK
      @b_s4xL
      ww1_s4xO
      ww2_s4xP
      ww3_s4xQ
      ww4_s4xR
      eta_s4xT
      eta10_s4xW ->
      case $wspan isDigit ww1_s4xO of { (# ww5_a4kj, ww6_a4kk #) ->
      case ww5_a4kj of wild1_a3P7 {
        [] ->
          eta10_s4xW
            (TrivialError
               (I# ww2_s4xP)
               (Just
                  (case ww1_s4xO of {
                     [] -> EndOfInput;
                     : t_a3VA ts_a3VB -> Tokens (nes (t_a3VA `cast` <Co:4> :: ...))
                   }))
               $s$wdecimal7)
            (State ww1_s4xO ww2_s4xP ww3_s4xQ ww4_s4xR);
        : ds1_a42b ds2_a42c ->
          eta_s4xT
            ($s$wdecimal_go1 wild1_a3P7 $s$wdecimal_z0)
            (case $wlenAcc wild1_a3P7 0# of ww7_a4ue { __DEFAULT ->
             State ww6_a4kk (+# ww2_s4xP ww7_a4ue) ww3_s4xQ ww4_s4xR
             })
            ($s$wdecimal1 `cast` <Co:5> :: ...)
      }
      }

$s$wdecimal
  = \ ww_s4xK @b_s4xL eta_s4xM eta10_s4xT _ _ eta13_s4xW ->
      case eta_s4xM of { State ww1_s4xO ww2_s4xP ww3_s4xQ ww4_s4xR ->
      $w$s$wdecimal
        @~<Co:1> :: ...
        ww1_s4xO
        ww2_s4xP
        ww3_s4xQ
        ww4_s4xR
        eta10_s4xT
        eta13_s4xW
      }

$sdecimal = ($s$wdecimal @~<Co:2> :: ...) `cast` <Co:7> :: ...

Rec {
$sinsertR_$sgo4
  = \ orig_a49u ds_a49v ds1_a49w ->
      case ds_a49v of ds2_a49x { __DEFAULT ->
      case ds1_a49w of wild_a49y {
        Bin bx_a49z y_a49A l_a49B r_a49C ->
          join {
            $j_s4p7
              = case $sinsertR_$sgo4 orig_a49u ds2_a49x l_a49B of l'_a49G
                { __DEFAULT ->
                case reallyUnsafePtrEquality# l'_a49G l_a49B of {
                  __DEFAULT -> balanceL y_a49A l'_a49G r_a49C;
                  1# -> wild_a49y
                }
                } } in
          join {
            $j1_s4p8
              = case $sinsertR_$sgo4 orig_a49u ds2_a49x r_a49C of r'_a49K
                { __DEFAULT ->
                case reallyUnsafePtrEquality# r'_a49K r_a49C of {
                  __DEFAULT -> balanceR y_a49A l_a49B r'_a49K;
                  1# -> wild_a49y
                }
                } } in
          case ds2_a49x of {
            ErrorFail a1_a4kA ->
              case y_a49A of {
                __DEFAULT -> jump $j_s4p7;
                ErrorFail b1_a4kD ->
                  case $fOrdList_$s$ccompare1 a1_a4kA b1_a4kD of {
                    LT -> jump $j_s4p7;
                    EQ -> wild_a49y;
                    GT -> jump $j1_s4p8
                  }
              };
            ErrorIndentation a1_a4kF a2_a4o2 a3_a4o3 ->
              case y_a49A of {
                ErrorFail ds4_a4or -> jump $j1_s4p8;
                ErrorIndentation b1_a4o6 b2_a4o7 b3_a4o8 ->
                  case dataToTagSmall# a1_a4kF of a#_a4oa { __DEFAULT ->
                  case dataToTagSmall# b1_a4o6 of b#_a4ob { __DEFAULT ->
                  case <# a#_a4oa b#_a4ob of {
                    __DEFAULT ->
                      case ==# a#_a4oa b#_a4ob of {
                        __DEFAULT -> jump $j1_s4p8;
                        1# ->
                          case a2_a4o2 `cast` <Co:1> :: ... of { I# x#_a4of ->
                          case b2_a4o7 `cast` <Co:1> :: ... of { I# y#_a4oi ->
                          case <# x#_a4of y#_a4oi of {
                            __DEFAULT ->
                              case ==# x#_a4of y#_a4oi of {
                                __DEFAULT -> jump $j1_s4p8;
                                1# ->
                                  case a3_a4o3 `cast` <Co:1> :: ... of { I# x#1_a4oX ->
                                  case b3_a4o8 `cast` <Co:1> :: ... of { I# y#1_a4p0 ->
                                  case <# x#1_a4oX y#1_a4p0 of {
                                    __DEFAULT ->
                                      case ==# x#1_a4oX y#1_a4p0 of {
                                        __DEFAULT -> jump $j1_s4p8;
                                        1# -> wild_a49y
                                      };
                                    1# -> jump $j_s4p7
                                  }
                                  }
                                  }
                              };
                            1# -> jump $j_s4p7
                          }
                          }
                          }
                      };
                    1# -> jump $j_s4p7
                  }
                  }
                  };
                ErrorCustom ipv_a4ot -> jump $j_s4p7
              };
            ErrorCustom a1_a4om ->
              case y_a49A of {
                __DEFAULT -> jump $j1_s4p8;
                ErrorCustom b1_a4op -> wild_a49y
              }
          };
        Tip ->
          case lazy orig_a49u of conrep_a3DZ { __DEFAULT ->
          Bin 1# conrep_a3DZ Tip Tip
          }
      }
      }
end Rec }

Rec {
$sinsertR_$sgo1
  = \ orig_a49u ds_a49v ds1_a49w ->
      case ds_a49v of ds2_a49x { __DEFAULT ->
      case ds1_a49w of wild_a49y {
        Bin bx_a49z y_a49A l_a49B r_a49C ->
          join {
            $j_s4q6
              = case $sinsertR_$sgo1 orig_a49u ds2_a49x l_a49B of l'_a49G
                { __DEFAULT ->
                case reallyUnsafePtrEquality# l'_a49G l_a49B of {
                  __DEFAULT -> balanceL y_a49A l'_a49G r_a49C;
                  1# -> wild_a49y
                }
                } } in
          join {
            $j1_s4q7
              = case $sinsertR_$sgo1 orig_a49u ds2_a49x r_a49C of r'_a49K
                { __DEFAULT ->
                case reallyUnsafePtrEquality# r'_a49K r_a49C of {
                  __DEFAULT -> balanceR y_a49A l_a49B r'_a49K;
                  1# -> wild_a49y
                }
                } } in
          case ds2_a49x of {
            Tokens a1_a4pi ->
              case y_a49A of {
                __DEFAULT -> jump $j_s4q6;
                Tokens b1_a4pl ->
                  case a1_a4pi of { :| a2_a3c3 a3_a3c4 ->
                  case b1_a4pl of { :| b2_a3c7 b3_a3c8 ->
                  case a2_a3c3 `cast` <Co:3> :: ... of { C# x_a4pU ->
                  case b2_a3c7 `cast` <Co:3> :: ... of { C# y1_a4pX ->
                  case eqChar# x_a4pU y1_a4pX of {
                    __DEFAULT ->
                      case leChar# x_a4pU y1_a4pX of {
                        __DEFAULT -> jump $j1_s4q7;
                        1# -> jump $j_s4q6
                      };
                    1# ->
                      case $fOrdList_$ccompare
                             ($fOrdChar `cast` <Co:4> :: ...) a3_a3c4 b3_a3c8
                      of {
                        LT -> jump $j_s4q6;
                        EQ -> wild_a49y;
                        GT -> jump $j1_s4q7
                      }
                  }
                  }
                  }
                  }
                  }
              };
            Label a1_a4pn ->
              case y_a49A of {
                Tokens ds4_a4pK -> jump $j1_s4q7;
                Label b1_a4pq ->
                  case a1_a4pn of { :| a2_a4pt a3_a4pu ->
                  case b1_a4pq of { :| b2_a4px b3_a4py ->
                  case a2_a4pt of { C# x_a4pB ->
                  case b2_a4px of { C# y1_a4pE ->
                  case eqChar# x_a4pB y1_a4pE of {
                    __DEFAULT ->
                      case leChar# x_a4pB y1_a4pE of {
                        __DEFAULT -> jump $j1_s4q7;
                        1# -> jump $j_s4q6
                      };
                    1# ->
                      case $fOrdList_$s$ccompare1 a3_a4pu b3_a4py of {
                        LT -> jump $j_s4q6;
                        EQ -> wild_a49y;
                        GT -> jump $j1_s4q7
                      }
                  }
                  }
                  }
                  }
                  };
                EndOfInput -> jump $j_s4q6
              };
            EndOfInput ->
              case y_a49A of {
                __DEFAULT -> jump $j1_s4q7;
                EndOfInput -> wild_a49y
              }
          };
        Tip ->
          case lazy orig_a49u of conrep_a3DZ { __DEFAULT ->
          Bin 1# conrep_a3DZ Tip Tip
          }
      }
      }
end Rec }

Rec {
$sinsert_$sgo4
  = \ orig_a48L ds_a48M ds1_a48N ->
      case ds_a48M of ds2_a48O { __DEFAULT ->
      case ds1_a48N of wild_a48P {
        Bin bx_a48Q y_a48R l_a48S r_a48T ->
          join {
            $j_s4p4
              = case $sinsert_$sgo4 orig_a48L ds2_a48O l_a48S of l'_a48X
                { __DEFAULT ->
                case reallyUnsafePtrEquality# l'_a48X l_a48S of {
                  __DEFAULT -> balanceL y_a48R l'_a48X r_a48T;
                  1# -> wild_a48P
                }
                } } in
          join {
            $j1_s4p6
              = case $sinsert_$sgo4 orig_a48L ds2_a48O r_a48T of r'_a494
                { __DEFAULT ->
                case reallyUnsafePtrEquality# r'_a494 r_a48T of {
                  __DEFAULT -> balanceR y_a48R l_a48S r'_a494;
                  1# -> wild_a48P
                }
                } } in
          case ds2_a48O of {
            ErrorFail a1_a4kA ->
              case y_a48R of wild2_a4kC {
                __DEFAULT -> jump $j_s4p4;
                ErrorFail b1_a4kD ->
                  case $fOrdList_$s$ccompare1 a1_a4kA b1_a4kD of {
                    LT -> jump $j_s4p4;
                    EQ ->
                      case lazy orig_a48L of wild4_a491 { __DEFAULT ->
                      case reallyUnsafePtrEquality# orig_a48L wild2_a4kC of {
                        __DEFAULT -> Bin bx_a48Q wild4_a491 l_a48S r_a48T;
                        1# -> wild_a48P
                      }
                      };
                    GT -> jump $j1_s4p6
                  }
              };
            ErrorIndentation a1_a4kF a2_a4o2 a3_a4o3 ->
              case y_a48R of wild2_a4o5 {
                ErrorFail ds4_a4or -> jump $j1_s4p6;
                ErrorIndentation b1_a4o6 b2_a4o7 b3_a4o8 ->
                  case dataToTagSmall# a1_a4kF of a#_a4oa { __DEFAULT ->
                  case dataToTagSmall# b1_a4o6 of b#_a4ob { __DEFAULT ->
                  case <# a#_a4oa b#_a4ob of {
                    __DEFAULT ->
                      case ==# a#_a4oa b#_a4ob of {
                        __DEFAULT -> jump $j1_s4p6;
                        1# ->
                          case a2_a4o2 `cast` <Co:1> :: ... of { I# x#_a4of ->
                          case b2_a4o7 `cast` <Co:1> :: ... of { I# y#_a4oi ->
                          case <# x#_a4of y#_a4oi of {
                            __DEFAULT ->
                              case ==# x#_a4of y#_a4oi of {
                                __DEFAULT -> jump $j1_s4p6;
                                1# ->
                                  case a3_a4o3 `cast` <Co:1> :: ... of { I# x#1_a4oX ->
                                  case b3_a4o8 `cast` <Co:1> :: ... of { I# y#1_a4p0 ->
                                  case <# x#1_a4oX y#1_a4p0 of {
                                    __DEFAULT ->
                                      case ==# x#1_a4oX y#1_a4p0 of {
                                        __DEFAULT -> jump $j1_s4p6;
                                        1# ->
                                          case lazy orig_a48L of wild7_a491 { __DEFAULT ->
                                          case reallyUnsafePtrEquality# orig_a48L wild2_a4o5 of {
                                            __DEFAULT -> Bin bx_a48Q wild7_a491 l_a48S r_a48T;
                                            1# -> wild_a48P
                                          }
                                          }
                                      };
                                    1# -> jump $j_s4p4
                                  }
                                  }
                                  }
                              };
                            1# -> jump $j_s4p4
                          }
                          }
                          }
                      };
                    1# -> jump $j_s4p4
                  }
                  }
                  };
                ErrorCustom ipv_a4ot -> jump $j_s4p4
              };
            ErrorCustom a1_a4om ->
              case y_a48R of wild2_a4oo {
                __DEFAULT -> jump $j1_s4p6;
                ErrorCustom b1_a4op ->
                  case lazy orig_a48L of wild3_a491 { __DEFAULT ->
                  case reallyUnsafePtrEquality# orig_a48L wild2_a4oo of {
                    __DEFAULT -> Bin bx_a48Q wild3_a491 l_a48S r_a48T;
                    1# -> wild_a48P
                  }
                  }
              }
          };
        Tip ->
          case lazy orig_a48L of conrep_a3DZ { __DEFAULT ->
          Bin 1# conrep_a3DZ Tip Tip
          }
      }
      }
end Rec }

Rec {
$sinsert_$sgo1
  = \ orig_a48L ds_a48M ds1_a48N ->
      case ds_a48M of ds2_a48O { __DEFAULT ->
      case ds1_a48N of wild_a48P {
        Bin bx_a48Q y_a48R l_a48S r_a48T ->
          join {
            $j_s4q2
              = case $sinsert_$sgo1 orig_a48L ds2_a48O l_a48S of l'_a48X
                { __DEFAULT ->
                case reallyUnsafePtrEquality# l'_a48X l_a48S of {
                  __DEFAULT -> balanceL y_a48R l'_a48X r_a48T;
                  1# -> wild_a48P
                }
                } } in
          join {
            $j1_s4q4
              = case $sinsert_$sgo1 orig_a48L ds2_a48O r_a48T of r'_a494
                { __DEFAULT ->
                case reallyUnsafePtrEquality# r'_a494 r_a48T of {
                  __DEFAULT -> balanceR y_a48R l_a48S r'_a494;
                  1# -> wild_a48P
                }
                } } in
          case ds2_a48O of {
            Tokens a1_a4pi ->
              case y_a48R of wild2_a4pk {
                __DEFAULT -> jump $j_s4q2;
                Tokens b1_a4pl ->
                  case a1_a4pi of { :| a2_a3c3 a3_a3c4 ->
                  case b1_a4pl of { :| b2_a3c7 b3_a3c8 ->
                  case a2_a3c3 `cast` <Co:3> :: ... of { C# x_a4pU ->
                  case b2_a3c7 `cast` <Co:3> :: ... of { C# y1_a4pX ->
                  case eqChar# x_a4pU y1_a4pX of {
                    __DEFAULT ->
                      case leChar# x_a4pU y1_a4pX of {
                        __DEFAULT -> jump $j1_s4q4;
                        1# -> jump $j_s4q2
                      };
                    1# ->
                      case $fOrdList_$ccompare
                             ($fOrdChar `cast` <Co:4> :: ...) a3_a3c4 b3_a3c8
                      of {
                        LT -> jump $j_s4q2;
                        EQ ->
                          case lazy orig_a48L of wild8_a491 { __DEFAULT ->
                          case reallyUnsafePtrEquality# orig_a48L wild2_a4pk of {
                            __DEFAULT -> Bin bx_a48Q wild8_a491 l_a48S r_a48T;
                            1# -> wild_a48P
                          }
                          };
                        GT -> jump $j1_s4q4
                      }
                  }
                  }
                  }
                  }
                  }
              };
            Label a1_a4pn ->
              case y_a48R of wild2_a4pp {
                Tokens ds4_a4pK -> jump $j1_s4q4;
                Label b1_a4pq ->
                  case a1_a4pn of { :| a2_a4pt a3_a4pu ->
                  case b1_a4pq of { :| b2_a4px b3_a4py ->
                  case a2_a4pt of { C# x_a4pB ->
                  case b2_a4px of { C# y1_a4pE ->
                  case eqChar# x_a4pB y1_a4pE of {
                    __DEFAULT ->
                      case leChar# x_a4pB y1_a4pE of {
                        __DEFAULT -> jump $j1_s4q4;
                        1# -> jump $j_s4q2
                      };
                    1# ->
                      case $fOrdList_$s$ccompare1 a3_a4pu b3_a4py of {
                        LT -> jump $j_s4q2;
                        EQ ->
                          case lazy orig_a48L of wild8_a491 { __DEFAULT ->
                          case reallyUnsafePtrEquality# orig_a48L wild2_a4pp of {
                            __DEFAULT -> Bin bx_a48Q wild8_a491 l_a48S r_a48T;
                            1# -> wild_a48P
                          }
                          };
                        GT -> jump $j1_s4q4
                      }
                  }
                  }
                  }
                  }
                  };
                EndOfInput -> jump $j_s4q2
              };
            EndOfInput ->
              case y_a48R of {
                __DEFAULT -> jump $j1_s4q4;
                EndOfInput ->
                  case lazy orig_a48L of wild3_a491 { __DEFAULT ->
                  case reallyUnsafePtrEquality# orig_a48L EndOfInput of {
                    __DEFAULT -> Bin bx_a48Q wild3_a491 l_a48S r_a48T;
                    1# -> wild_a48P
                  }
                  }
              }
          };
        Tip ->
          case lazy orig_a48L of conrep_a3DZ { __DEFAULT ->
          Bin 1# conrep_a3DZ Tip Tip
          }
      }
      }
end Rec }

Rec {
$s$wsplitS
  = \ ds_a47O ds1_a47P ->
      case ds1_a47P of {
        Bin bx_a47R y_a47S l_a47T r_a47U ->
          case ds_a47O of wild1_a4kz {
            ErrorFail a1_a4kA ->
              case y_a47S of wild2_a4kC {
                __DEFAULT ->
                  case $s$wsplitS wild1_a4kz l_a47T of { (# ww_a47Z, ww1_a480 #) ->
                  case link wild2_a4kC ww1_a480 r_a47U of conrep_a482 { __DEFAULT ->
                  (# ww_a47Z, conrep_a482 #)
                  }
                  };
                ErrorFail b1_a4kD ->
                  case $fOrdList_$s$ccompare1 a1_a4kA b1_a4kD of {
                    LT ->
                      case $s$wsplitS wild1_a4kz l_a47T of { (# ww_a47Z, ww1_a480 #) ->
                      case link wild2_a4kC ww1_a480 r_a47U of conrep_a482 { __DEFAULT ->
                      (# ww_a47Z, conrep_a482 #)
                      }
                      };
                    EQ -> (# l_a47T, r_a47U #);
                    GT ->
                      case $s$wsplitS wild1_a4kz r_a47U of { (# ww_a486, ww1_a487 #) ->
                      case link wild2_a4kC l_a47T ww_a486 of conrep_a489 { __DEFAULT ->
                      (# conrep_a489, ww1_a487 #)
                      }
                      }
                  }
              };
            ErrorIndentation a1_a4kF a2_a4o2 a3_a4o3 ->
              case y_a47S of wild2_a4o5 {
                ErrorFail ds2_a4or ->
                  case $s$wsplitS wild1_a4kz r_a47U of { (# ww_a486, ww1_a487 #) ->
                  case link wild2_a4o5 l_a47T ww_a486 of conrep_a489 { __DEFAULT ->
                  (# conrep_a489, ww1_a487 #)
                  }
                  };
                ErrorIndentation b1_a4o6 b2_a4o7 b3_a4o8 ->
                  case dataToTagSmall# a1_a4kF of a#_a4oa { __DEFAULT ->
                  case dataToTagSmall# b1_a4o6 of b#_a4ob { __DEFAULT ->
                  case <# a#_a4oa b#_a4ob of {
                    __DEFAULT ->
                      case ==# a#_a4oa b#_a4ob of {
                        __DEFAULT ->
                          case $s$wsplitS wild1_a4kz r_a47U of { (# ww_a486, ww1_a487 #) ->
                          case link wild2_a4o5 l_a47T ww_a486 of conrep_a489 { __DEFAULT ->
                          (# conrep_a489, ww1_a487 #)
                          }
                          };
                        1# ->
                          case a2_a4o2 `cast` <Co:1> :: ... of { I# x#_a4of ->
                          case b2_a4o7 `cast` <Co:1> :: ... of { I# y#_a4oi ->
                          case <# x#_a4of y#_a4oi of {
                            __DEFAULT ->
                              case ==# x#_a4of y#_a4oi of {
                                __DEFAULT ->
                                  case $s$wsplitS wild1_a4kz r_a47U of { (# ww_a486, ww1_a487 #) ->
                                  case link wild2_a4o5 l_a47T ww_a486 of conrep_a489 { __DEFAULT ->
                                  (# conrep_a489, ww1_a487 #)
                                  }
                                  };
                                1# ->
                                  case a3_a4o3 `cast` <Co:1> :: ... of { I# x#1_a4oX ->
                                  case b3_a4o8 `cast` <Co:1> :: ... of { I# y#1_a4p0 ->
                                  case <# x#1_a4oX y#1_a4p0 of {
                                    __DEFAULT ->
                                      case ==# x#1_a4oX y#1_a4p0 of {
                                        __DEFAULT ->
                                          case $s$wsplitS wild1_a4kz r_a47U of
                                          { (# ww_a486, ww1_a487 #) ->
                                          case link wild2_a4o5 l_a47T ww_a486 of conrep_a489
                                          { __DEFAULT ->
                                          (# conrep_a489, ww1_a487 #)
                                          }
                                          };
                                        1# -> (# l_a47T, r_a47U #)
                                      };
                                    1# ->
                                      case $s$wsplitS wild1_a4kz l_a47T of
                                      { (# ww_a47Z, ww1_a480 #) ->
                                      case link wild2_a4o5 ww1_a480 r_a47U of conrep_a482
                                      { __DEFAULT ->
                                      (# ww_a47Z, conrep_a482 #)
                                      }
                                      }
                                  }
                                  }
                                  }
                              };
                            1# ->
                              case $s$wsplitS wild1_a4kz l_a47T of { (# ww_a47Z, ww1_a480 #) ->
                              case link wild2_a4o5 ww1_a480 r_a47U of conrep_a482 { __DEFAULT ->
                              (# ww_a47Z, conrep_a482 #)
                              }
                              }
                          }
                          }
                          }
                      };
                    1# ->
                      case $s$wsplitS wild1_a4kz l_a47T of { (# ww_a47Z, ww1_a480 #) ->
                      case link wild2_a4o5 ww1_a480 r_a47U of conrep_a482 { __DEFAULT ->
                      (# ww_a47Z, conrep_a482 #)
                      }
                      }
                  }
                  }
                  };
                ErrorCustom ipv_a4ot ->
                  case $s$wsplitS wild1_a4kz l_a47T of { (# ww_a47Z, ww1_a480 #) ->
                  case link wild2_a4o5 ww1_a480 r_a47U of conrep_a482 { __DEFAULT ->
                  (# ww_a47Z, conrep_a482 #)
                  }
                  }
              };
            ErrorCustom a1_a4om ->
              case y_a47S of wild2_a4oo {
                __DEFAULT ->
                  case $s$wsplitS wild1_a4kz r_a47U of { (# ww_a486, ww1_a487 #) ->
                  case link wild2_a4oo l_a47T ww_a486 of conrep_a489 { __DEFAULT ->
                  (# conrep_a489, ww1_a487 #)
                  }
                  };
                ErrorCustom b1_a4op -> (# l_a47T, r_a47U #)
              }
          };
        Tip -> (# Tip, Tip #)
      }
end Rec }

Rec {
$sunion
  = \ t1_a46l ds_a46m ->
      case ds_a46m of wild_a46n {
        Bin bx_a46o x_a46p ds1_a46q ds2_a46r ->
          case bx_a46o of {
            __DEFAULT ->
              case t1_a46l of wild1_a46u {
                Bin bx1_a46v x1_a46w ds4_a46x ds5_a46y ->
                  case bx1_a46v of {
                    __DEFAULT ->
                      case $s$wsplitS x1_a46w wild_a46n of { (# ww_a47F, ww1_a47G #) ->
                      case $sunion ds5_a46y ww1_a47G of r1r2_a46Y { __DEFAULT ->
                      case $sunion ds4_a46x ww_a47F of l1l2_a46Z { __DEFAULT ->
                      case reallyUnsafePtrEquality# l1l2_a46Z ds4_a46x of {
                        __DEFAULT -> link x1_a46w l1l2_a46Z r1r2_a46Y;
                        1# ->
                          case reallyUnsafePtrEquality# r1r2_a46Y ds5_a46y of {
                            __DEFAULT -> link x1_a46w l1l2_a46Z r1r2_a46Y;
                            1# -> wild1_a46u
                          }
                      }
                      }
                      }
                      };
                    1# -> $sinsert_$sgo4 x1_a46w x1_a46w wild_a46n
                  };
                Tip -> wild_a46n
              };
            1# -> $sinsertR_$sgo4 x_a46p x_a46p t1_a46l
          };
        Tip -> t1_a46l
      }
end Rec }

$dMonadParsec_r4FU
  = $fMonadParsecesParsecT $fOrdVoid $fStreamList_$s$fStreamList

eta1_r4FV = $wnoeol $dMonadParsec_r4FU @~<Co:2> :: ...

$fEqEquation_$c==
  = \ ds_s4z5 ds1_s4za ->
      case ds_s4z5 of { Equation ww_s4z7 ww1_s4z8 ->
      case ds1_s4za of { Equation ww2_s4zc ww3_s4zd ->
      join {
        $j_s4p9
          = case ww1_s4z8 of { :| a1_a3mG a2_a3mH ->
            case ww3_s4zd of { :| b1_a3mK b2_a3mL ->
            case integerEq a1_a3mG b1_a3mK of {
              False -> False;
              True -> $fEqList_$c== $fEqInteger a2_a3mH b2_a3mL
            }
            }
            } } in
      case ww_s4z7 of {
        IS x2_a3lm ->
          case ww2_s4zc of {
            __DEFAULT -> False;
            IS y2_a3lp ->
              case ==# x2_a3lm y2_a3lp of {
                __DEFAULT -> False;
                1# -> jump $j_s4p9
              }
          };
        IP x2_a3lr ->
          case ww2_s4zc of {
            __DEFAULT -> False;
            IP y2_a3mq ->
              case bigNatEq# x2_a3lr y2_a3mq of {
                __DEFAULT -> False;
                1# -> jump $j_s4p9
              }
          };
        IN x2_a3mt ->
          case ww2_s4zc of {
            __DEFAULT -> False;
            IN y2_a3mw ->
              case bigNatEq# x2_a3mt y2_a3mw of {
                __DEFAULT -> False;
                1# -> jump $j_s4p9
              }
          }
      }
      }
      }

$fEqEquation_$c/=
  = \ eta_B0 eta10_B1 ->
      case eta_B0 of { Equation ww_s4z7 ww1_s4z8 ->
      case eta10_B1 of { Equation ww2_s4zc ww3_s4zd ->
      join {
        $j_s4p9
          = case ww1_s4z8 of { :| a1_a3mG a2_a3mH ->
            case ww3_s4zd of { :| b1_a3mK b2_a3mL ->
            case integerEq a1_a3mG b1_a3mK of {
              False -> True;
              True ->
                case $fEqList_$c== $fEqInteger a2_a3mH b2_a3mL of {
                  False -> True;
                  True -> False
                }
            }
            }
            } } in
      case ww_s4z7 of {
        IS x2_a3lm ->
          case ww2_s4zc of {
            __DEFAULT -> True;
            IS y2_a3lp ->
              case ==# x2_a3lm y2_a3lp of {
                __DEFAULT -> True;
                1# -> jump $j_s4p9
              }
          };
        IP x2_a3lr ->
          case ww2_s4zc of {
            __DEFAULT -> True;
            IP y2_a3mq ->
              case bigNatEq# x2_a3lr y2_a3mq of {
                __DEFAULT -> True;
                1# -> jump $j_s4p9
              }
          };
        IN x2_a3mt ->
          case ww2_s4zc of {
            __DEFAULT -> True;
            IN y2_a3mw ->
              case bigNatEq# x2_a3mt y2_a3mw of {
                __DEFAULT -> True;
                1# -> jump $j_s4p9
              }
          }
      }
      }
      }

$fEqEquation = C:Eq $fEqEquation_$c== $fEqEquation_$c/=

Rec {
$s$wsplitS1
  = \ ds_a47O ds1_a47P ->
      case ds1_a47P of {
        Bin bx_a47R y_a47S l_a47T r_a47U ->
          case ds_a47O of wild1_a4ph {
            Tokens a1_a4pi ->
              case y_a47S of wild2_a4pk {
                __DEFAULT ->
                  case $s$wsplitS1 wild1_a4ph l_a47T of { (# ww_a47Z, ww1_a480 #) ->
                  case link wild2_a4pk ww1_a480 r_a47U of conrep_a482 { __DEFAULT ->
                  (# ww_a47Z, conrep_a482 #)
                  }
                  };
                Tokens b1_a4pl ->
                  case a1_a4pi of { :| a2_a3c3 a3_a3c4 ->
                  case b1_a4pl of { :| b2_a3c7 b3_a3c8 ->
                  case a2_a3c3 `cast` <Co:3> :: ... of { C# x_a4pU ->
                  case b2_a3c7 `cast` <Co:3> :: ... of { C# y1_a4pX ->
                  case eqChar# x_a4pU y1_a4pX of {
                    __DEFAULT ->
                      case leChar# x_a4pU y1_a4pX of {
                        __DEFAULT ->
                          case $s$wsplitS1 wild1_a4ph r_a47U of { (# ww_a486, ww1_a487 #) ->
                          case link wild2_a4pk l_a47T ww_a486 of conrep_a489 { __DEFAULT ->
                          (# conrep_a489, ww1_a487 #)
                          }
                          };
                        1# ->
                          case $s$wsplitS1 wild1_a4ph l_a47T of { (# ww_a47Z, ww1_a480 #) ->
                          case link wild2_a4pk ww1_a480 r_a47U of conrep_a482 { __DEFAULT ->
                          (# ww_a47Z, conrep_a482 #)
                          }
                          }
                      };
                    1# ->
                      case $fOrdList_$ccompare
                             ($fOrdChar `cast` <Co:4> :: ...) a3_a3c4 b3_a3c8
                      of {
                        LT ->
                          case $s$wsplitS1 wild1_a4ph l_a47T of { (# ww_a47Z, ww1_a480 #) ->
                          case link wild2_a4pk ww1_a480 r_a47U of conrep_a482 { __DEFAULT ->
                          (# ww_a47Z, conrep_a482 #)
                          }
                          };
                        EQ -> (# l_a47T, r_a47U #);
                        GT ->
                          case $s$wsplitS1 wild1_a4ph r_a47U of { (# ww_a486, ww1_a487 #) ->
                          case link wild2_a4pk l_a47T ww_a486 of conrep_a489 { __DEFAULT ->
                          (# conrep_a489, ww1_a487 #)
                          }
                          }
                      }
                  }
                  }
                  }
                  }
                  }
              };
            Label a1_a4pn ->
              case y_a47S of wild2_a4pp {
                Tokens ds2_a4pK ->
                  case $s$wsplitS1 wild1_a4ph r_a47U of { (# ww_a486, ww1_a487 #) ->
                  case link wild2_a4pp l_a47T ww_a486 of conrep_a489 { __DEFAULT ->
                  (# conrep_a489, ww1_a487 #)
                  }
                  };
                Label b1_a4pq ->
                  case a1_a4pn of { :| a2_a4pt a3_a4pu ->
                  case b1_a4pq of { :| b2_a4px b3_a4py ->
                  case a2_a4pt of { C# x_a4pB ->
                  case b2_a4px of { C# y1_a4pE ->
                  case eqChar# x_a4pB y1_a4pE of {
                    __DEFAULT ->
                      case leChar# x_a4pB y1_a4pE of {
                        __DEFAULT ->
                          case $s$wsplitS1 wild1_a4ph r_a47U of { (# ww_a486, ww1_a487 #) ->
                          case link wild2_a4pp l_a47T ww_a486 of conrep_a489 { __DEFAULT ->
                          (# conrep_a489, ww1_a487 #)
                          }
                          };
                        1# ->
                          case $s$wsplitS1 wild1_a4ph l_a47T of { (# ww_a47Z, ww1_a480 #) ->
                          case link wild2_a4pp ww1_a480 r_a47U of conrep_a482 { __DEFAULT ->
                          (# ww_a47Z, conrep_a482 #)
                          }
                          }
                      };
                    1# ->
                      case $fOrdList_$s$ccompare1 a3_a4pu b3_a4py of {
                        LT ->
                          case $s$wsplitS1 wild1_a4ph l_a47T of { (# ww_a47Z, ww1_a480 #) ->
                          case link wild2_a4pp ww1_a480 r_a47U of conrep_a482 { __DEFAULT ->
                          (# ww_a47Z, conrep_a482 #)
                          }
                          };
                        EQ -> (# l_a47T, r_a47U #);
                        GT ->
                          case $s$wsplitS1 wild1_a4ph r_a47U of { (# ww_a486, ww1_a487 #) ->
                          case link wild2_a4pp l_a47T ww_a486 of conrep_a489 { __DEFAULT ->
                          (# conrep_a489, ww1_a487 #)
                          }
                          }
                      }
                  }
                  }
                  }
                  }
                  };
                EndOfInput ->
                  case $s$wsplitS1 wild1_a4ph l_a47T of { (# ww_a47Z, ww1_a480 #) ->
                  case link EndOfInput ww1_a480 r_a47U of conrep_a482 { __DEFAULT ->
                  (# ww_a47Z, conrep_a482 #)
                  }
                  }
              };
            EndOfInput ->
              case y_a47S of wild2_a4pJ {
                __DEFAULT ->
                  case $s$wsplitS1 EndOfInput r_a47U of { (# ww_a486, ww1_a487 #) ->
                  case link wild2_a4pJ l_a47T ww_a486 of conrep_a489 { __DEFAULT ->
                  (# conrep_a489, ww1_a487 #)
                  }
                  };
                EndOfInput -> (# l_a47T, r_a47U #)
              }
          };
        Tip -> (# Tip, Tip #)
      }
end Rec }

Rec {
$saccHints_$sunion
  = \ t1_a46l ds_a46m ->
      case ds_a46m of wild_a46n {
        Bin bx_a46o x_a46p ds1_a46q ds2_a46r ->
          case bx_a46o of {
            __DEFAULT ->
              case t1_a46l of wild1_a46u {
                Bin bx1_a46v x1_a46w ds4_a46x ds5_a46y ->
                  case bx1_a46v of {
                    __DEFAULT ->
                      case $s$wsplitS1 x1_a46w wild_a46n of { (# ww_a47F, ww1_a47G #) ->
                      case $saccHints_$sunion ds5_a46y ww1_a47G of r1r2_a46Y
                      { __DEFAULT ->
                      case $saccHints_$sunion ds4_a46x ww_a47F of l1l2_a46Z
                      { __DEFAULT ->
                      case reallyUnsafePtrEquality# l1l2_a46Z ds4_a46x of {
                        __DEFAULT -> link x1_a46w l1l2_a46Z r1r2_a46Y;
                        1# ->
                          case reallyUnsafePtrEquality# r1r2_a46Y ds5_a46y of {
                            __DEFAULT -> link x1_a46w l1l2_a46Z r1r2_a46Y;
                            1# -> wild1_a46u
                          }
                      }
                      }
                      }
                      };
                    1# -> $sinsert_$sgo1 x1_a46w x1_a46w wild_a46n
                  };
                Tip -> wild_a46n
              };
            1# -> $sinsertR_$sgo1 x_a46p x_a46p t1_a46l
          };
        Tip -> t1_a46l
      }
end Rec }

$saccHints
  = \ @a_a4a2
      @e_a4a3
      @m_a4a4
      @b_a4a5
      eta_a4a7
      eta10_a4a8
      eta11_a4a9
      eta3_a4aa
      eta12_a4ab ->
      eta10_a4a8
        eta11_a4a9
        eta3_a4aa
        (($saccHints_$sunion
            (eta_a4a7 `cast` <Co:4> :: ...) (eta12_a4ab `cast` <Co:4> :: ...))
         `cast` <Co:5> :: ...)

solution48 = $saccHints_$sunion Tip Tip

solution47 = $saccHints_$sunion solution48 Tip

Rec {
$wgo1_r4FW
  = \ f_s4zw @b_s4zx eta_s4zy eta10_s4zz eta11_s4zA eta12_s4zB ->
      let { lvl36_s4Ev = f_s4zw [] } in
      $fApplicativeParsecT2
        $fStreamList_$s$fStreamList
        eta1_r4FV
        $sdecimal
        eta_s4zy
        (\ x_a34t eta13_Xn eta14_Xo ->
           $wgo1_r4FW
             (\ x2_a3Ih -> f_s4zw (: x_a34t x2_a3Ih))
             eta13_Xn
             eta10_s4zz
             eta11_s4zA
             ($saccHints eta14_Xo eta10_s4zz))
        eta11_s4zA
        (\ x_a34t eta13_Xn eta14_Xo ->
           $wgo1_r4FW
             (\ x2_a3Ih -> f_s4zw (: x_a34t x2_a3Ih))
             eta13_Xn
             eta10_s4zz
             eta11_s4zA
             ($saccHints eta14_Xo eta12_s4zB))
        (\ err_a3Kc _ ->
           eta12_s4zB
             lvl36_s4Ev
             eta_s4zy
             (case err_a3Kc of {
                TrivialError errOffset_a3LD ds_a3LE ps_a3LF ->
                  case eta_s4zy of { State ds1_a3LI bx_a3LJ ds2_a3LK ds3_a3LL ->
                  case errOffset_a3LD of { I# y_a4jQ ->
                  case ==# bx_a3LJ y_a4jQ of {
                    __DEFAULT -> solution47 `cast` <Co:5> :: ...;
                    1# ->
                      case ps_a3LF of wild3_a3LQ {
                        Bin bx1_a3LR ds4_a3LS ds5_a3LT ds6_a3LU ->
                          ($saccHints_$sunion ($saccHints_$sunion wild3_a3LQ Tip) Tip)
                          `cast` <Co:5> :: ...;
                        Tip -> solution47 `cast` <Co:5> :: ...
                      }
                  }
                  }
                  };
                FancyError ds_a3LX ds1_a3LY -> solution47 `cast` <Co:5> :: ...
              }))
end Rec }

$fShowEquation4 = "Equation {eqnTarget = "#

$fShowEquation3 = ", eqnVals = "#

$fShowEquation2 = "}"#

$w$cshowsPrec
  = \ ww_s4zI ww1_s4zM ww2_s4zN ->
      case ww1_s4zM of ww3_X1 { __DEFAULT ->
      let {
        f_s44O
          = case ww2_s4zN of { :| ww4_a4qq ww5_a4qr ->
            $w$cshowsPrec4 $fShowInteger 0# ww4_a4qq ww5_a4qr
            } } in
      case >=# ww_s4zI 11# of {
        __DEFAULT ->
          \ x_Xg ->
            unpackAppendCString#
              $fShowEquation4
              ($w$cshowsPrec1
                 0#
                 ww3_X1
                 (unpackAppendCString#
                    $fShowEquation3
                    (f_s44O (unpackAppendCString# $fShowEquation2 x_Xg))));
        1# ->
          \ x_a34m ->
            : $fShowCallStack4
              (unpackAppendCString#
                 $fShowEquation4
                 ($w$cshowsPrec1
                    0#
                    ww3_X1
                    (unpackAppendCString#
                       $fShowEquation3
                       (f_s44O
                          (unpackAppendCString#
                             $fShowEquation2 (: $fShowCallStack3 x_a34m))))))
      }
      }

$fShowEquation_$cshowsPrec
  = \ a_s4zG ds_s4zK ->
      case a_s4zG of { I# ww_s4zI ->
      case ds_s4zK of { Equation ww1_s4zM ww2_s4zN ->
      $w$cshowsPrec ww_s4zI ww1_s4zM ww2_s4zN
      }
      }

$fShowEquation1
  = \ ds_s4zK eta_B0 ->
      case ds_s4zK of { Equation ww_s4zM ww1_s4zN ->
      $w$cshowsPrec 0# ww_s4zM ww1_s4zN eta_B0
      }

$fShowEquation_$cshowList
  = \ ls_a33Y s_a33Z -> showList__ $fShowEquation1 ls_a33Y s_a33Z

$fShowEquation5 = I# 0#

$fShowEquation_$cshow
  = \ x_a343 ->
      case x_a343 of { Equation ww_s4zM ww1_s4zN ->
      $w$cshowsPrec 0# ww_s4zM ww1_s4zN []
      }

$fShowEquation
  = C:Show
      $fShowEquation_$cshowsPrec
      $fShowEquation_$cshow
      $fShowEquation_$cshowList

$fOrdEquation_$c<
  = \ a_s4A5 b_s4Aa ->
      case a_s4A5 of { Equation ww_s4A7 ww1_s4A8 ->
      case b_s4Aa of { Equation ww2_s4Ac ww3_s4Ad ->
      join {
        $j_s4r3
          = case ww1_s4A8 of { :| a2_a3bz a3_a3bA ->
            case ww3_s4Ad of { :| b1_a3bD b2_a3bE ->
            case integerCompare a2_a3bz b1_a3bD of {
              LT -> True;
              EQ ->
                case $fOrdList_$ccompare $fOrdInteger b2_a3bE a3_a3bA of {
                  __DEFAULT -> False;
                  GT -> True
                };
              GT -> False
            }
            }
            } } in
      case ww_s4A7 of {
        IS x_a38n ->
          case ww2_s4Ac of {
            IS y_a38q ->
              case <# x_a38n y_a38q of {
                __DEFAULT ->
                  case ==# x_a38n y_a38q of {
                    __DEFAULT -> False;
                    1# -> jump $j_s4r3
                  };
                1# -> True
              };
            IP ds2_a3bd -> True;
            IN ds2_a3bf -> False
          };
        IP x_a38s ->
          case ww2_s4Ac of {
            __DEFAULT -> False;
            IP y_a3b6 ->
              case bigNatCompare x_a38s y_a3b6 of {
                LT -> True;
                EQ -> jump $j_s4r3;
                GT -> False
              }
          };
        IN x_a3b8 ->
          case ww2_s4Ac of {
            __DEFAULT -> True;
            IN y_a3bb ->
              case bigNatCompare y_a3bb x_a3b8 of {
                LT -> True;
                EQ -> jump $j_s4r3;
                GT -> False
              }
          }
      }
      }
      }

$fOrdEquation_$c<=
  = \ a_a26x b_a26y ->
      case b_a26y of { Equation ww_s4A7 ww1_s4A8 ->
      case a_a26x of { Equation ww2_s4Ac ww3_s4Ad ->
      join {
        $j_s4r3
          = case ww1_s4A8 of { :| a2_a3bz a3_a3bA ->
            case ww3_s4Ad of { :| b1_a3bD b2_a3bE ->
            case integerCompare a2_a3bz b1_a3bD of {
              LT -> False;
              EQ ->
                case $fOrdList_$ccompare $fOrdInteger b2_a3bE a3_a3bA of {
                  __DEFAULT -> True;
                  GT -> False
                };
              GT -> True
            }
            }
            } } in
      case ww_s4A7 of {
        IS x_a38n ->
          case ww2_s4Ac of {
            IS y_a38q ->
              case <# x_a38n y_a38q of {
                __DEFAULT ->
                  case ==# x_a38n y_a38q of {
                    __DEFAULT -> True;
                    1# -> jump $j_s4r3
                  };
                1# -> False
              };
            IP ds2_a3bd -> False;
            IN ds2_a3bf -> True
          };
        IP x_a38s ->
          case ww2_s4Ac of {
            __DEFAULT -> True;
            IP y_a3b6 ->
              case bigNatCompare x_a38s y_a3b6 of {
                LT -> False;
                EQ -> jump $j_s4r3;
                GT -> True
              }
          };
        IN x_a3b8 ->
          case ww2_s4Ac of {
            __DEFAULT -> False;
            IN y_a3bb ->
              case bigNatCompare y_a3bb x_a3b8 of {
                LT -> False;
                EQ -> jump $j_s4r3;
                GT -> True
              }
          }
      }
      }
      }

$fOrdEquation_$cmax
  = \ x_a346 y_a347 ->
      case y_a347 of wild_X1 { Equation ww_s4A7 ww1_s4A8 ->
      case x_a346 of wild1_X2 { Equation ww2_s4Ac ww3_s4Ad ->
      join {
        $j_s4r3
          = case ww1_s4A8 of { :| a2_a3bz a3_a3bA ->
            case ww3_s4Ad of { :| b1_a3bD b2_a3bE ->
            case integerCompare a2_a3bz b1_a3bD of {
              LT -> wild1_X2;
              EQ ->
                case $fOrdList_$ccompare $fOrdInteger b2_a3bE a3_a3bA of {
                  __DEFAULT -> wild_X1;
                  GT -> wild1_X2
                };
              GT -> wild_X1
            }
            }
            } } in
      case ww_s4A7 of {
        IS x1_a38n ->
          case ww2_s4Ac of {
            IS y1_a38q ->
              case <# x1_a38n y1_a38q of {
                __DEFAULT ->
                  case ==# x1_a38n y1_a38q of {
                    __DEFAULT -> wild_X1;
                    1# -> jump $j_s4r3
                  };
                1# -> wild1_X2
              };
            IP ds2_a3bd -> wild1_X2;
            IN ds2_a3bf -> wild_X1
          };
        IP x1_a38s ->
          case ww2_s4Ac of {
            __DEFAULT -> wild_X1;
            IP y1_a3b6 ->
              case bigNatCompare x1_a38s y1_a3b6 of {
                LT -> wild1_X2;
                EQ -> jump $j_s4r3;
                GT -> wild_X1
              }
          };
        IN x1_a3b8 ->
          case ww2_s4Ac of {
            __DEFAULT -> wild1_X2;
            IN y1_a3bb ->
              case bigNatCompare y1_a3bb x1_a3b8 of {
                LT -> wild1_X2;
                EQ -> jump $j_s4r3;
                GT -> wild_X1
              }
          }
      }
      }
      }

$fOrdEquation_$c>=
  = \ a_a26B b_a26C ->
      case a_a26B of { Equation ww_s4A7 ww1_s4A8 ->
      case b_a26C of { Equation ww2_s4Ac ww3_s4Ad ->
      join {
        $j_s4r3
          = case ww1_s4A8 of { :| a2_a3bz a3_a3bA ->
            case ww3_s4Ad of { :| b1_a3bD b2_a3bE ->
            case integerCompare a2_a3bz b1_a3bD of {
              LT -> False;
              EQ ->
                case $fOrdList_$ccompare $fOrdInteger b2_a3bE a3_a3bA of {
                  __DEFAULT -> True;
                  GT -> False
                };
              GT -> True
            }
            }
            } } in
      case ww_s4A7 of {
        IS x_a38n ->
          case ww2_s4Ac of {
            IS y_a38q ->
              case <# x_a38n y_a38q of {
                __DEFAULT ->
                  case ==# x_a38n y_a38q of {
                    __DEFAULT -> True;
                    1# -> jump $j_s4r3
                  };
                1# -> False
              };
            IP ds2_a3bd -> False;
            IN ds2_a3bf -> True
          };
        IP x_a38s ->
          case ww2_s4Ac of {
            __DEFAULT -> True;
            IP y_a3b6 ->
              case bigNatCompare x_a38s y_a3b6 of {
                LT -> False;
                EQ -> jump $j_s4r3;
                GT -> True
              }
          };
        IN x_a3b8 ->
          case ww2_s4Ac of {
            __DEFAULT -> False;
            IN y_a3bb ->
              case bigNatCompare y_a3bb x_a3b8 of {
                LT -> False;
                EQ -> jump $j_s4r3;
                GT -> True
              }
          }
      }
      }
      }

$fOrdEquation_$c>
  = \ a_a26z b_a26A -> $fOrdEquation_$c< b_a26A a_a26z

$fOrdEquation_$cmin
  = \ x_a34d y_a34e ->
      case y_a34e of wild_X1 { Equation ww_s4A7 ww1_s4A8 ->
      case x_a34d of wild1_X2 { Equation ww2_s4Ac ww3_s4Ad ->
      join {
        $j_s4r3
          = case ww1_s4A8 of { :| a2_a3bz a3_a3bA ->
            case ww3_s4Ad of { :| b1_a3bD b2_a3bE ->
            case integerCompare a2_a3bz b1_a3bD of {
              LT -> wild_X1;
              EQ ->
                case $fOrdList_$ccompare $fOrdInteger b2_a3bE a3_a3bA of {
                  __DEFAULT -> wild1_X2;
                  GT -> wild_X1
                };
              GT -> wild1_X2
            }
            }
            } } in
      case ww_s4A7 of {
        IS x1_a38n ->
          case ww2_s4Ac of {
            IS y1_a38q ->
              case <# x1_a38n y1_a38q of {
                __DEFAULT ->
                  case ==# x1_a38n y1_a38q of {
                    __DEFAULT -> wild1_X2;
                    1# -> jump $j_s4r3
                  };
                1# -> wild_X1
              };
            IP ds2_a3bd -> wild_X1;
            IN ds2_a3bf -> wild1_X2
          };
        IP x1_a38s ->
          case ww2_s4Ac of {
            __DEFAULT -> wild1_X2;
            IP y1_a3b6 ->
              case bigNatCompare x1_a38s y1_a3b6 of {
                LT -> wild_X1;
                EQ -> jump $j_s4r3;
                GT -> wild1_X2
              }
          };
        IN x1_a3b8 ->
          case ww2_s4Ac of {
            __DEFAULT -> wild_X1;
            IN y1_a3bb ->
              case bigNatCompare y1_a3bb x1_a3b8 of {
                LT -> wild_X1;
                EQ -> jump $j_s4r3;
                GT -> wild1_X2
              }
          }
      }
      }
      }

$fOrdEquation_$ccompare
  = \ a_s4Bk b_s4Bp ->
      case a_s4Bk of { Equation ww_s4Bm ww1_s4Bn ->
      case b_s4Bp of { Equation ww2_s4Br ww3_s4Bs ->
      join {
        $j_s4r4
          = case ww1_s4Bn of { :| a2_a3c3 a3_a3c4 ->
            case ww3_s4Bs of { :| b1_a3c7 b2_a3c8 ->
            case integerCompare a2_a3c3 b1_a3c7 of wild4_a3ca {
              __DEFAULT -> wild4_a3ca;
              EQ -> $fOrdList_$ccompare $fOrdInteger a3_a3c4 b2_a3c8
            }
            }
            } } in
      case ww_s4Bm of {
        IS x_a38n ->
          case ww2_s4Br of {
            IS y_a38q ->
              case <# x_a38n y_a38q of {
                __DEFAULT ->
                  case ==# x_a38n y_a38q of {
                    __DEFAULT -> GT;
                    1# -> jump $j_s4r4
                  };
                1# -> LT
              };
            IP ds2_a3bd -> LT;
            IN ds2_a3bf -> GT
          };
        IP x_a38s ->
          case ww2_s4Br of {
            __DEFAULT -> GT;
            IP y_a3b6 ->
              case bigNatCompare x_a38s y_a3b6 of wild4_X3 {
                __DEFAULT -> wild4_X3;
                EQ -> jump $j_s4r4
              }
          };
        IN x_a3b8 ->
          case ww2_s4Br of {
            __DEFAULT -> LT;
            IN y_a3bb ->
              case bigNatCompare y_a3bb x_a3b8 of wild4_X3 {
                __DEFAULT -> wild4_X3;
                EQ -> jump $j_s4r4
              }
          }
      }
      }
      }

$fOrdEquation
  = C:Ord
      $fEqEquation
      $fOrdEquation_$ccompare
      $fOrdEquation_$c<
      $fOrdEquation_$c<=
      $fOrdEquation_$c>
      $fOrdEquation_$c>=
      $fOrdEquation_$cmax
      $fOrdEquation_$cmin

eqnVals
  = \ ds_d33B ->
      case ds_d33B of { Equation ds1_d33C ds2_d33D -> ds2_d33D }

eqnTarget
  = \ ds_d33y ->
      case ds_d33y of { Equation ds1_d33z ds2_d33A -> ds1_d33z }

allEvalPaths
  = \ @t_a2Ib $dFoldable1_a2Ic ops_a1ZC eta_B0 ->
      case toNonEmpty $dFoldable1_a2Ic eta_B0 of { :| x_a3d6 xs1_a3d7 ->
      letrec {
        go3_a4vf
          = \ ds_a4vg eta10_X1 ->
              case ds_a4vg of {
                [] -> $fApplicativeList_$cpure eta10_X1;
                : y_a4vj ys_a4vk ->
                  letrec {
                    go4_X3
                      = \ ds1_X4 ->
                          case ds1_X4 of {
                            [] -> [];
                            : y1_X6 ys1_X7 ->
                              ++ (go3_a4vf ys_a4vk (y1_X6 eta10_X1 y_a4vj)) (go4_X3 ys1_X7)
                          }; } in
                  go4_X3 ops_a1ZC
              }; } in
      go3_a4vf xs1_a3d7 x_a3d6
      }

$trModule4 = "main"#

$trModule3 = TrNameS $trModule4

$trModule2 = "Day07"#

$trModule1 = TrNameS $trModule2

$trModule = Module $trModule3 $trModule1

$krep_r4FX = KindRepTyConApp $tcInteger []

$krep1_r4FY = : $krep_r4FX []

$krep2_r4FZ = KindRepTyConApp $tcNonEmpty $krep1_r4FY

$tcEquation2 = "Equation"#

$tcEquation1 = TrNameS $tcEquation2

$tcEquation
  = TyCon
      4789004920046233045#Word64
      15823751576335385379#Word64
      $trModule
      $tcEquation1
      0#
      krep$*

$krep3_r4G0 = KindRepTyConApp $tcEquation []

$krep4_r4G1 = KindRepFun $krep2_r4FZ $krep3_r4G0

$tc'Equation1 = KindRepFun $krep_r4FX $krep4_r4G1

$tc'Equation3 = "'Equation"#

$tc'Equation2 = TrNameS $tc'Equation3

$tc'Equation
  = TyCon
      12939349924929296715#Word64
      8838989823068823788#Word64
      $trModule
      $tc'Equation2
      0#
      $tc'Equation1

canBeTrue
  = \ ops_a1ZP ds_d2Xr ->
      case ds_d2Xr of { Equation target_a1ZQ vals_a1ZR ->
      case vals_a1ZR of { :| x_a3d6 xs1_a3d7 ->
      letrec {
        go3_a4vf
          = \ ds1_a4vg eta_B0 ->
              case ds1_a4vg of {
                [] -> $fApplicativeList_$cpure eta_B0;
                : y_a4vj ys_a4vk ->
                  letrec {
                    go4_X4
                      = \ ds2_X5 ->
                          case ds2_X5 of {
                            [] -> [];
                            : y1_X7 ys1_X8 ->
                              ++ (go3_a4vf ys_a4vk (y1_X7 eta_B0 y_a4vj)) (go4_X4 ys1_X8)
                          }; } in
                  go4_X4 ops_a1ZP
              }; } in
      joinrec {
        go4_X2 ds1_a4vg
          = case ds1_a4vg of {
              [] -> False;
              : y_a4vj ys_a4vk ->
                case target_a1ZQ of {
                  IS x2_a3lm ->
                    case y_a4vj of {
                      __DEFAULT -> jump go4_X2 ys_a4vk;
                      IS y2_a3lp ->
                        case ==# x2_a3lm y2_a3lp of {
                          __DEFAULT -> jump go4_X2 ys_a4vk;
                          1# -> True
                        }
                    };
                  IP x2_a3lr ->
                    case y_a4vj of {
                      __DEFAULT -> jump go4_X2 ys_a4vk;
                      IP y2_a3mq ->
                        case bigNatEq# x2_a3lr y2_a3mq of {
                          __DEFAULT -> jump go4_X2 ys_a4vk;
                          1# -> True
                        }
                    };
                  IN x2_a3mt ->
                    case y_a4vj of {
                      __DEFAULT -> jump go4_X2 ys_a4vk;
                      IN y2_a3mw ->
                        case bigNatEq# x2_a3mt y2_a3mw of {
                          __DEFAULT -> jump go4_X2 ys_a4vk;
                          1# -> True
                        }
                    }
                }
            }; } in
      jump go4_X2 (go3_a4vf xs1_a3d7 x_a3d6)
      }
      }

concatIntegers
  = \ a_a1ZS b_a1ZT ->
      join {
        $j_s4v2 x_a4jF
          = case <# x_a4jF 0# of {
              __DEFAULT ->
                case x_a4jF of wild_X1 {
                  __DEFAULT ->
                    integerAdd
                      (integerMul a_a1ZS ($w$spowImpl lvl4_r4FT wild_X1)) b_a1ZT;
                  0# -> integerAdd (integerMul a_a1ZS lvl3_r4FS) b_a1ZT
                };
              1# -> lvl2_r4FR
            } } in
      case b_a1ZT of {
        IS x2_a4rd ->
          case <# x2_a4rd 1# of {
            __DEFAULT ->
              case integerLog10'_$s$wintegerLog10'1 x2_a4rd of ww_a4rm
              { __DEFAULT ->
              jump $j_s4v2 (+# ww_a4rm 1#)
              };
            1# -> case integerLog1 of {}
          };
        IP x2_a4rg ->
          case integerLog10'_$s$wintegerLog10' x2_a4rg of ww_a4rm
          { __DEFAULT ->
          jump $j_s4v2 (+# ww_a4rm 1#)
          };
        IN x2_a4ri -> case integerLog1 of {}
      }

g_r4G2 = : concatIntegers []

g1_r4G3 = : integerMul g_r4G2

g2_r4G4 = : integerAdd g1_r4G3

lvl5_r4G5 = \ eta_a3dz -> eta_a3dz

lvl6_r4G6 = ": "#

lvl7_r4G7 = unpackCString# lvl6_r4G6

lvl8_r4G8
  = $w$cfromString
      @~<Co:3> :: ...
      (lvl5_r4G5 `cast` <Co:4> :: ...)
      $fEqList_$s$fEqList1
      $fStreamList_$s$fStreamList
      lvl7_r4G7

msg_r4G9
  = "Pattern match failure in 'do' block at Day07.hs:42:3-11"#

msg1_r4Ga = unpackCString# msg_r4G9

lvl9_r4Gb = ErrorFail msg1_r4Ga

lvl10_r4Gc = Bin 1# lvl9_r4Gb Tip Tip

$wequationP
  = \ @b1_s4C5
      ww_s4C8
      ww1_s4C9
      ww2_s4Ca
      ww3_s4Cb
      cok_s4Cd
      cerr_s4Ce
      eerr_s4Cg ->
      $w$s$wdecimal
        @~<Co:2> :: ...
        ww_s4C8
        ww1_s4C9
        ww2_s4Ca
        ww3_s4Cb
        (\ x_a3Em s'_a3En hs_a3Eo ->
           $fApplicativeParsecT2
             $fStreamList_$s$fStreamList
             lvl8_r4G8
             ((\ @b2_X7 s1_X8 cok1_X9 cerr1_Xa _ eerr1_Xc ->
                 case s1_X8 of wild_X1
                 { State ww4_s4xO ww5_s4xP ww6_s4xQ ww7_s4xR ->
                 $w$s$wdecimal
                   @~<Co:2> :: ...
                   ww4_s4xO
                   ww5_s4xP
                   ww6_s4xQ
                   ww7_s4xR
                   (\ x1_a34t eta_Xd eta10_Xe ->
                      $wgo1_r4FW
                        id
                        eta_Xd
                        (\ x2_Xf eta11_Xg eta12_Xh ->
                           cok1_X9
                             (case x_a3Em of conrep_a25d { __DEFAULT ->
                              Equation conrep_a25d (:| x1_a34t x2_Xf)
                              })
                             eta11_Xg
                             (($saccHints_$sunion (eta12_Xh `cast` <Co:4> :: ...) Tip)
                              `cast` <Co:5> :: ...))
                        cerr1_Xa
                        (\ x2_Xf eta11_Xg eta12_Xh ->
                           cok1_X9
                             (case x_a3Em of conrep_a25d { __DEFAULT ->
                              Equation conrep_a25d (:| x1_a34t x2_Xf)
                              })
                             eta11_Xg
                             (($saccHints_$sunion
                                 ($saccHints_$sunion
                                    (eta10_Xe `cast` <Co:4> :: ...) (eta12_Xh `cast` <Co:4> :: ...))
                                 Tip)
                              `cast` <Co:5> :: ...)))
                   (\ _ _ -> eerr1_Xc (FancyError (I# ww5_s4xP) lvl10_r4Gc) wild_X1)
                 })
              `cast` <Co:7> :: ...)
             s'_a3En
             cok_s4Cd
             cerr_s4Ce
             ($saccHints hs_a3Eo cok_s4Cd)
             (\ e1_a3VW ->
                case e1_a3VW of wild_a3VX {
                  TrivialError pos_a3VY us_a3VZ ps_a3W0 ->
                    cerr_s4Ce
                      (TrivialError
                         pos_a3VY
                         us_a3VZ
                         ($saccHints_$sunion ps_a3W0 (hs_a3Eo `cast` <Co:4> :: ...)));
                  FancyError ipv_a3W2 ipv1_a3W3 -> cerr_s4Ce wild_a3VX
                }))
        eerr_s4Cg

equationP1
  = \ @b1_s4C5 s1_s4C6 cok_s4Cd cerr_s4Ce _ eerr_s4Cg ->
      case s1_s4C6 of { State ww_s4C8 ww1_s4C9 ww2_s4Ca ww3_s4Cb ->
      $wequationP
        ww_s4C8 ww1_s4C9 ww2_s4Ca ww3_s4Cb cok_s4Cd cerr_s4Ce eerr_s4Cg
      }

equationP = equationP1 `cast` <Co:7> :: ...

lvl11_r4Gd = C# 'e'#

as_r4Ge = "nd of line"#

lvl12_r4Gf = unpackCString# as_r4Ge

lvl13_r4Gg = :| lvl11_r4Gd lvl12_r4Gf

lvl14_r4Gh = Label lvl13_r4Gg

lvl15_r4Gi = Bin 1# lvl14_r4Gh Tip Tip

eta2_r4Gj = C# '\n'#

eta4_r4Gk = :| (eta2_r4Gj `cast` <Co:4> :: ...) []

eta5_r4Gl = Tokens eta4_r4Gk

eta6_r4Gm = Bin 1# eta5_r4Gl Tip Tip

lvl16_r4Gn = C# '\r'#

as1_r4Go = "\n"#

lvl17_r4Gp = unpackCString# as1_r4Go

lvl18_r4Gq
  = :|
      (lvl16_r4Gn `cast` <Co:4> :: ...) (lvl17_r4Gp `cast` <Co:5> :: ...)

lvl19_r4Gr = Tokens lvl18_r4Gq

eta7_r4Gs = "\r\n"#

eta8_r4Gt = unpackCString# eta7_r4Gs

len_r4Gu
  = case $wlenAcc eta8_r4Gt 0# of ww1_a4ue { __DEFAULT ->
    I# ww1_a4ue
    }

lvl20_r4Gv = Bin 1# lvl19_r4Gr Tip Tip

lvl21_r4Gw = "fromList"#

lvl22_r4Gx = unpackCString# lvl21_r4Gw

lvl23_r4Gy
  = "megaparsec-9.6.1-435035ecc56a18f44dab36dd23f63c852263aa88bf4dec3cd449729ade12e5c3"#

lvl24_r4Gz = unpackCString# lvl23_r4Gy

lvl25_r4GA = "Text.Megaparsec.Internal"#

lvl26_r4GB = unpackCString# lvl25_r4GA

lvl27_r4GC = "./Text/Megaparsec/Internal.hs"#

lvl28_r4GD = unpackCString# lvl27_r4GC

lvl29_r4GE = I# 535#

lvl30_r4GF = I# 34#

lvl31_r4GG = I# 45#

lvl32_r4GH
  = SrcLoc
      lvl24_r4Gz
      lvl26_r4GB
      lvl28_r4GD
      lvl29_r4GE
      lvl30_r4GF
      lvl29_r4GE
      lvl31_r4GG

lvl33_r4GI = PushCallStack lvl22_r4Gx lvl32_r4GH EmptyCallStack

lvl34_r4GJ = cycle7 (lvl33_r4GI `cast` <Co:4> :: ...)

lvl35_r4GK = Just EndOfInput

$weta1_r4GL
  = \ @b_s4CG s1_s4CH cok_s4CI eerr_s4CL ->
      case s1_s4CH of wild_a40i
      { State input_a40k bx_a40l pst_a40m de_a40n ->
      join {
        eerr1_s45Q err_a3Kc ms_a3Kd
          = case len_r4Gu of { I# ww_a4th ->
            join {
              eerr2_X5 err'_a3M0 s'_a3M1
                = eerr_s4CL
                    (join {
                       $j_s45O x#_a3M4
                         = join {
                             $j1_s45M y#_a3M6
                               = case <# x#_a3M4 y#_a3M6 of {
                                   __DEFAULT ->
                                     case ==# x#_a3M4 y#_a3M6 of {
                                       __DEFAULT ->
                                         case err'_a3M0 of wild2_a3ZM {
                                           TrivialError pos_a3ZN us_a3ZO ds_a3ZP ->
                                             TrivialError pos_a3ZN us_a3ZO lvl15_r4Gi;
                                           FancyError ipv_a3ZV ipv1_a3ZW -> wild2_a3ZM
                                         };
                                       1# ->
                                         case err'_a3M0 of wild2_a3M9 {
                                           TrivialError s2_a3Ma u1_a3Mb p1_a3Mc ->
                                             case err_a3Kc of wild3_a3Me {
                                               TrivialError ds_a3Mf u2_a3Mg p2_a3Mh ->
                                                 TrivialError
                                                   s2_a3Ma
                                                   (case u1_a3Mb of wild4_a3Mj {
                                                      Nothing -> u2_a3Mg;
                                                      Just x_a3Ml ->
                                                        case u2_a3Mg of {
                                                          Nothing -> wild4_a3Mj;
                                                          Just y_a3Mp ->
                                                            Just
                                                              (case $fOrdErrorItem_$c<
                                                                      ($fOrdChar
                                                                       `cast` <Co:4> :: ...)
                                                                      y_a3Mp
                                                                      x_a3Ml
                                                               of {
                                                                 False -> y_a3Mp;
                                                                 True -> x_a3Ml
                                                               })
                                                        }
                                                    })
                                                   lvl15_r4Gi;
                                               FancyError ds_a3Mr ds1_a3Ms -> wild3_a3Me
                                             };
                                           FancyError ds_a3Mu ds1_a3Mv ->
                                             case err_a3Kc of {
                                               TrivialError ds2_a3My ds3_a3Mz ds4_a3MA ->
                                                 wild2_a3M9;
                                               FancyError ds2_a3MC x2_a3MD ->
                                                 FancyError ds_a3Mu ($sunion ds1_a3Mv x2_a3MD)
                                             }
                                         }
                                     };
                                   1# ->
                                     case err_a3Kc of wild2_a3ZM {
                                       TrivialError pos_a3ZN us_a3ZO ds_a3ZP ->
                                         TrivialError pos_a3ZN us_a3ZO lvl15_r4Gi;
                                       FancyError ipv_a3ZV ipv1_a3ZW -> wild2_a3ZM
                                     }
                                 } } in
                           case err_a3Kc of {
                             TrivialError o_a3MG ds_a3MH ds1_a3MI ->
                               case o_a3MG of { I# y#_a3ML -> jump $j1_s45M y#_a3ML };
                             FancyError o_a3MN ds_a3MO ->
                               case o_a3MN of { I# y#_a3MR -> jump $j1_s45M y#_a3MR }
                           } } in
                     case err'_a3M0 of {
                       TrivialError o_a3MU ds_a3MV ds1_a3MW ->
                         case o_a3MU of { I# x#_a3MZ -> jump $j_s45O x#_a3MZ };
                       FancyError o_a3N1 ds_a3N2 ->
                         case o_a3N1 of { I# x#_a3N5 -> jump $j_s45O x#_a3N5 }
                     })
                    (longestMatch ms_a3Kd s'_a3M1) } in
            join {
              $w$j_s4CA ww1_s4Cw ww2_s4Cx
                = case $fEqList_$s$c==1 eta8_r4Gt (ww1_s4Cw `cast` <Co:3> :: ...)
                  of {
                    False ->
                      jump eerr2_X5
                        (TrivialError
                           (I# bx_a40l)
                           (Just
                              (Tokens
                                 (case ww1_s4Cw `cast` <Co:9> :: ... of {
                                    [] -> lvl34_r4GJ;
                                    : a1_a41T as2_a41U -> :| a1_a41T as2_a41U
                                  })))
                           lvl20_r4Gv)
                        wild_a40i;
                    True ->
                      cok_s4CI
                        ww1_s4Cw
                        (State ww2_s4Cx (+# bx_a40l ww_a4th) pst_a40m de_a40n)
                        (Tip `cast` <Co:5> :: ...)
                  } } in
            case <=# ww_a4th 0# of {
              __DEFAULT ->
                case input_a40k of wild2_a4tn {
                  [] ->
                    jump eerr2_X5
                      (TrivialError (I# bx_a40l) lvl35_r4GK lvl20_r4Gv) wild_a40i;
                  : ds1_a4tp ds2_a4tq ->
                    case splitAt_$s$wsplitAt' ww_a4th wild2_a4tn of
                    { (# ww1_a4tt, ww2_a4tu #) ->
                    jump $w$j_s4CA (ww1_a4tt `cast` <Co:4> :: ...) ww2_a4tu
                    }
                };
              1# -> jump $w$j_s4CA ([] `cast` <Co:4> :: ...) input_a40k
            }
            } } in
      case input_a40k of {
        [] ->
          jump eerr1_s45Q
            (TrivialError (I# bx_a40l) lvl35_r4GK eta6_r4Gm) wild_a40i;
        : t_a3VA ts_a3VB ->
          case t_a3VA of wild2_a4uG { C# x_a4uH ->
          case x_a4uH of {
            __DEFAULT ->
              jump eerr1_s45Q
                (TrivialError
                   (I# bx_a40l)
                   (Just (Tokens (:| (wild2_a4uG `cast` <Co:4> :: ...) [])))
                   eta6_r4Gm)
                wild_a40i;
            '\n'# ->
              cok_s4CI
                ((: wild2_a4uG []) `cast` <Co:4> :: ...)
                (State ts_a3VB (+# bx_a40l 1#) pst_a40m de_a40n)
                (Tip `cast` <Co:5> :: ...)
          }
          }
      }
      }

eta9_r4GM
  = \ @b_s4CG s1_s4CH cok_s4CI _ _ eerr_s4CL ->
      $weta1_r4GL s1_s4CH cok_s4CI eerr_s4CL

Rec {
$wgo
  = \ f_s4CU @b_s4CV eta_s4CW eta10_s4CX eta11_s4CY eta12_s4CZ ->
      let { lvl36_s4F1 = f_s4CU [] } in
      $fApplicativeParsecT2
        $fStreamList_$s$fStreamList
        (eta9_r4GM `cast` <Co:9> :: ...)
        (equationP1 `cast` <Co:7> :: ...)
        eta_s4CW
        (\ x_a34t eta13_Xv eta14_Xw ->
           $wgo
             (\ x2_a3Ih -> f_s4CU (: x_a34t x2_a3Ih))
             eta13_Xv
             eta10_s4CX
             eta11_s4CY
             ($saccHints eta14_Xw eta10_s4CX))
        eta11_s4CY
        (\ x_a34t eta13_Xv eta14_Xw ->
           $wgo
             (\ x2_a3Ih -> f_s4CU (: x_a34t x2_a3Ih))
             eta13_Xv
             eta10_s4CX
             eta11_s4CY
             ($saccHints eta14_Xw eta12_s4CZ))
        (\ err_a3Kc _ ->
           eta12_s4CZ
             lvl36_s4F1
             eta_s4CW
             (case err_a3Kc of {
                TrivialError errOffset_a3LD ds_a3LE ps_a3LF ->
                  case eta_s4CW of { State ds1_a3LI bx_a3LJ ds2_a3LK ds3_a3LL ->
                  case errOffset_a3LD of { I# y_a4jQ ->
                  case ==# bx_a3LJ y_a4jQ of {
                    __DEFAULT -> solution47 `cast` <Co:5> :: ...;
                    1# ->
                      case ps_a3LF of wild3_a3LQ {
                        Bin bx1_a3LR ds4_a3LS ds5_a3LT ds6_a3LU ->
                          ($saccHints_$sunion ($saccHints_$sunion wild3_a3LQ Tip) Tip)
                          `cast` <Co:5> :: ...;
                        Tip -> solution47 `cast` <Co:5> :: ...
                      }
                  }
                  }
                  };
                FancyError ds_a3LX ds1_a3LY -> solution47 `cast` <Co:5> :: ...
              }))
end Rec }

$wsolution
  = \ @b1_s4D9 s1_s4Da cok_s4Db cerr_s4Dc eok_s4Dd ->
      case s1_s4Da of wild_X1
      { State ww_s4C8 ww1_s4C9 ww2_s4Ca ww3_s4Cb ->
      $wequationP
        ww_s4C8
        ww1_s4C9
        ww2_s4Ca
        ww3_s4Cb
        (\ x_a34t eta_B0 eta10_B1 ->
           $wgo
             id
             eta_B0
             (\ x1_Xm -> cok_s4Db (: x_a34t x1_Xm))
             cerr_s4Dc
             (\ x1_Xm eta11_Xn eta12_Xo ->
                cok_s4Db
                  (: x_a34t x1_Xm)
                  eta11_Xn
                  (($saccHints_$sunion
                      (eta10_B1 `cast` <Co:4> :: ...) (eta12_Xo `cast` <Co:4> :: ...))
                   `cast` <Co:5> :: ...)))
        cerr_s4Dc
        (\ err_a3Kc _ ->
           eok_s4Dd
             []
             wild_X1
             (case err_a3Kc of {
                TrivialError errOffset_a3LD ds_a3LE ps_a3LF ->
                  case errOffset_a3LD of { I# y_a4jQ ->
                  case ==# ww1_s4C9 y_a4jQ of {
                    __DEFAULT -> solution47 `cast` <Co:5> :: ...;
                    1# ->
                      case ps_a3LF of wild3_a3LQ {
                        Bin bx1_a3LR ds4_a3LS ds5_a3LT ds6_a3LU ->
                          ($saccHints_$sunion ($saccHints_$sunion wild3_a3LQ Tip) Tip)
                          `cast` <Co:5> :: ...;
                        Tip -> solution47 `cast` <Co:5> :: ...
                      }
                  }
                  };
                FancyError ds_a3LX ds1_a3LY -> solution47 `cast` <Co:5> :: ...
              }))
      }

solution46
  = \ @b1_s4D9 s1_s4Da cok_s4Db cerr_s4Dc eok_s4Dd _ ->
      $wsolution s1_s4Da cok_s4Db cerr_s4Dc eok_s4Dd

g3_r4GN = : integerMul []

g4_r4GO = : integerAdd g3_r4GN

Rec {
go1_r4GP
  = \ ds_Xa eta_Xb ->
      case ds_Xa of {
        [] -> $fApplicativeList_$cpure eta_Xb;
        : y_Xd ys_Xe ->
          letrec {
            go3_Xf
              = \ ds1_Xg ->
                  case ds1_Xg of {
                    [] -> [];
                    : y1_Xi ys1_Xj ->
                      ++ (go1_r4GP ys_Xe (y1_Xi eta_Xb y_Xd)) (go3_Xf ys1_Xj)
                  }; } in
          go3_Xf g4_r4GO
      }
end Rec }

Rec {
solution_go2
  = \ ds_a4vg eta_B0 ->
      case ds_a4vg of {
        [] -> eta_B0;
        : y_a4vj ys_a4vk ->
          case y_a4vj of { Equation target_a1ZQ vals_a1ZR ->
          case vals_a1ZR of { :| x_a3d6 xs1_a3d7 ->
          join {
            $j_s4vN
              = case eta_B0 of z_a3nv { __DEFAULT ->
                solution_go2 ys_a4vk (integerAdd z_a3nv target_a1ZQ)
                } } in
          join { $j1_s4vM = solution_go2 ys_a4vk eta_B0 } in
          joinrec {
            go3_X9 ds1_Xa
              = case ds1_Xa of {
                  [] -> jump $j1_s4vM;
                  : y1_Xc ys1_Xd ->
                    case target_a1ZQ of {
                      IS x2_a3lm ->
                        case y1_Xc of {
                          __DEFAULT -> jump go3_X9 ys1_Xd;
                          IS y3_a3lp ->
                            case ==# x2_a3lm y3_a3lp of {
                              __DEFAULT -> jump go3_X9 ys1_Xd;
                              1# -> jump $j_s4vN
                            }
                        };
                      IP x2_a3lr ->
                        case y1_Xc of {
                          __DEFAULT -> jump go3_X9 ys1_Xd;
                          IP y3_a3mq ->
                            case bigNatEq# x2_a3lr y3_a3mq of {
                              __DEFAULT -> jump go3_X9 ys1_Xd;
                              1# -> jump $j_s4vN
                            }
                        };
                      IN x2_a3mt ->
                        case y1_Xc of {
                          __DEFAULT -> jump go3_X9 ys1_Xd;
                          IN y3_a3mw ->
                            case bigNatEq# x2_a3mt y3_a3mw of {
                              __DEFAULT -> jump go3_X9 ys1_Xd;
                              1# -> jump $j_s4vN
                            }
                        }
                    }
                }; } in
          jump go3_X9 (go1_r4GP xs1_a3d7 x_a3d6)
          }
          }
      }
end Rec }

solution45 = \ x_s4DA -> Just (solution_go2 x_s4DA $s$wdecimal_z0)

solution44 = \ _ -> solution45

solution40 = \ _ eta_B0 -> $fShowInteger_$cshow eta_B0

solution43 = Solver solution44 solution40

Rec {
go2_r4GQ
  = \ ds_Xa eta_Xb ->
      case ds_Xa of {
        [] -> $fApplicativeList_$cpure eta_Xb;
        : y_Xd ys_Xe ->
          letrec {
            go3_Xf
              = \ ds1_Xg ->
                  case ds1_Xg of {
                    [] -> [];
                    : y1_Xi ys1_Xj ->
                      ++ (go2_r4GQ ys_Xe (y1_Xi eta_Xb y_Xd)) (go3_Xf ys1_Xj)
                  }; } in
          go3_Xf g2_r4G4
      }
end Rec }

Rec {
solution_go1
  = \ ds_a4vg eta_B0 ->
      case ds_a4vg of {
        [] -> eta_B0;
        : y_a4vj ys_a4vk ->
          case y_a4vj of { Equation target_a1ZQ vals_a1ZR ->
          case vals_a1ZR of { :| x_a3d6 xs1_a3d7 ->
          join {
            $j_s4vP
              = case eta_B0 of z_a3nv { __DEFAULT ->
                solution_go1 ys_a4vk (integerAdd z_a3nv target_a1ZQ)
                } } in
          join { $j1_s4vO = solution_go1 ys_a4vk eta_B0 } in
          joinrec {
            go3_X9 ds1_Xa
              = case ds1_Xa of {
                  [] -> jump $j1_s4vO;
                  : y1_Xc ys1_Xd ->
                    case target_a1ZQ of {
                      IS x2_a3lm ->
                        case y1_Xc of {
                          __DEFAULT -> jump go3_X9 ys1_Xd;
                          IS y3_a3lp ->
                            case ==# x2_a3lm y3_a3lp of {
                              __DEFAULT -> jump go3_X9 ys1_Xd;
                              1# -> jump $j_s4vP
                            }
                        };
                      IP x2_a3lr ->
                        case y1_Xc of {
                          __DEFAULT -> jump go3_X9 ys1_Xd;
                          IP y3_a3mq ->
                            case bigNatEq# x2_a3lr y3_a3mq of {
                              __DEFAULT -> jump go3_X9 ys1_Xd;
                              1# -> jump $j_s4vP
                            }
                        };
                      IN x2_a3mt ->
                        case y1_Xc of {
                          __DEFAULT -> jump go3_X9 ys1_Xd;
                          IN y3_a3mw ->
                            case bigNatEq# x2_a3mt y3_a3mw of {
                              __DEFAULT -> jump go3_X9 ys1_Xd;
                              1# -> jump $j_s4vP
                            }
                        }
                    }
                }; } in
          jump go3_X9 (go2_r4GQ xs1_a3d7 x_a3d6)
          }
          }
      }
end Rec }

solution42 = \ x_s4E1 -> Just (solution_go1 x_s4E1 $s$wdecimal_z0)

solution41 = \ _ -> solution42

solution39 = Solver solution41 solution40

solution10 = "3749"#

solution9 = unpackCString# solution10

solution8 = (PartA, solution9)

solution7 = "11387"#

solution6 = unpackCString# solution7

solution5 = (PartB, solution6)

solution4 = : solution5 []

solution3 = : solution8 solution4

solution38 = "190: 10 19"#

solution37 = unpackCString# solution38

solution36 = "3267: 81 40 27"#

solution35 = unpackCString# solution36

solution34 = "83: 17 5"#

solution33 = unpackCString# solution34

solution32 = "156: 15 6"#

solution31 = unpackCString# solution32

solution30 = "7290: 6 8 6 15"#

solution29 = unpackCString# solution30

solution28 = "161011: 16 10 13"#

solution27 = unpackCString# solution28

solution26 = "192: 17 8 14"#

solution25 = unpackCString# solution26

solution24 = "21037: 9 7 18 13"#

solution23 = unpackCString# solution24

solution22 = "292: 11 6 16 20"#

solution21 = unpackCString# solution22

solution20 = : solution21 []

solution19 = : solution23 solution20

solution18 = : solution25 solution19

solution17 = : solution27 solution18

solution16 = : solution29 solution17

solution15 = : solution31 solution16

solution14 = : solution33 solution15

solution13 = : solution35 solution14

solution12 = : solution37 solution13

solution11 = unlines solution12

solution2 = :=> solution11 solution3

solution1 = : solution2 []

solution
  = Solution
      (solution46 `cast` <Co:8> :: ...) solution43 solution39 solution1


------ Local rules for imported ids --------
"SPEC/Day07 $wsplitS @(ErrorFancy Void)" [2]
    forall $dOrd_s48s. $wsplitS $dOrd_s48s = $s$wsplitS
"SPEC/Day07 $wsplitS @(ErrorItem (Token [Char]))" [2]
    forall $dOrd_s48b. $wsplitS $dOrd_s48b = $s$wsplitS1
"SPEC/Day07 union @(ErrorFancy Void)"
    forall $dOrd_X1. union $dOrd_X1 = $sunion
"SPEC/Day07 union @(ErrorItem (Token [Char]))"
    forall $dOrd_s479. union $dOrd_s479 = $saccHints_$sunion
"SPEC/Day07 accHints @[Char] @_ @_ @_ @_"
    forall @a_a4a2 @e_a4a3 @m_a4a4 @b_a4a5 $dStream_s4ac.
      accHints $dStream_s4ac
      = $saccHints
"SPEC/Day07 $wdecimal @Void @[Char] @(ParsecT
                                       Void String Identity) @Integer" [2]
    forall $dMonadParsec1_s4dH ww_a4aB $dNum_s4dI.
      $wdecimal $dMonadParsec1_s4dH @~<Co:1> :: ... $dNum_s4dI
      = ($s$wdecimal @~<Co:1> :: ...) `cast` <Co:7> :: ...
"SPEC/Day07 decimal @Void @[Char] @(ParsecT
                                     Void String Identity) @Integer" [2]
    forall $dMonadParsec1_s4as $d~_s4at $dNum_s4au.
      decimal $dMonadParsec1_s4as $d~_s4at $dNum_s4au
      = $sdecimal

